<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">

    <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <!-- <param name="ConversionPattern" value="[%d{dd/MM/yy hh:mm:ss:sss z}] %5p %c{2}: %m%n" /> -->
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n" />
        </layout>
         <!--过滤器设置输出的级别-->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <!-- 设置日志输出的最小级别 -->
            <param name="levelMin" value="DEBUG" />
            <!-- 设置日志输出的最大级别 -->
            <param name="levelMax" value="ERROR" />
            <!-- 设置日志输出的xxx，默认是false -->
            <param name="AcceptOnMatch" value="true" />
        </filter>
    </appender>
    
    <appender name="RollingFileAppender" class="org.apache.log4j.RollingFileAppender">
        <!-- <param name="file" value="${user.home}/foss-framework.log" /> -->
        <param name="file" value="d:/logs/all.log" />
        <param name="append" value="true" />
        <param name="maxFileSize" value="10MB" />
        <param name="maxBackupIndex" value="100" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d [%t] %-5p %C{6} (%F:%L) - %m%n" />
        </layout>
    </appender>
     
     <!-- 将日志信息输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="DailyRollingFileAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!-- 设置日志信息输出文件全路径名 -->
        <param name="File" value="d:/logs/day.log" />
        <!-- 设置日志每分钟回滚一次，即产生一个新的日志文件 -->
        <!-- <param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" /> -->
        <!-- 设置日志每天回滚一次，即产生一个新的日志文件 -->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'" />
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- 设置日志输出的格式 -->
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n" />
        </layout>
    </appender>
    
    <!-- <appender name="db" class="com.myProject.util.log.ExtendAppender">   
         <layout class="org.apache.log4j.PatternLayout">   
            <param name="ConversionPattern"   
                value="insert into OPERLOG (id, logdate, loglevel, module, function, message) values (seq_OPERLOG.nextval, \'%d\',\'%p\', \'%c{1}\', \'%M\', \'%m\')" />   
        </layout>  
    </appender> -->
    
    <!--
             注意：
     1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
     2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明
        2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志
        2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8 和 name=test.log4j.test8.UseLog4j，则2-1的情况是一样的
        2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！
     3：logger中定义的level和appender中的filter定义的level的区间取交集
     4：如果appender中的filter定义的 levelMin > levelMax ，则打印不出日志信息
     -->
    <!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制-->
    <!-- <logger name="com.ssm" additivity="false">
        <level value ="WARN"/>
        <appender-ref ref="DailyRollingFileAppender"/>
    </logger> -->
    <logger name="com.ssm.service" additivity="false">
        <level value ="error"/>
        <appender-ref ref="DailyRollingFileAppender"/>
    </logger>
    <logger name="com.ssm.manager" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="com.ssm.dao" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="com.ssm.job" additivity="false">
	    <level value="DEBUG" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="com.alibaba" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="org.springframework.core" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="org.springframework.beans" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="org.springframework.context" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="org.springframework.web" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>
    <logger name="org.apache.http" additivity="false">
	    <level value="error" />
	    <appender-ref ref="ConsoleAppender" />
	</logger>

    <!-- 打印myBatis的sql语句 -->
    <logger name="java.sql" additivity="false">  
        <level value="debug"/>  
    </logger>  
    <logger name="META-INF.ibatis" additivity="false">  
        <level value="error"/>  
    </logger>  
    
    <!-- <category name="java.sql">
        <priority value="debug" />
    </category>
    <category name="META-INF.ibatis">
        <priority value="error" />
    </category> -->
    <!--通过<category></category>的定义可以将各个包中的类日志输出到不同的日志文件中-->  
    <!-- <category name="com.ssm">  
        <priority value="debug" />  
        <appender-ref ref="ConsoleAppender" />  
        <appender-ref ref="RollingFileAppender" />  
        <appender-ref ref="DailyRollingFileAppender" />  
    </category>  -->
        
    <!--  日记记录的优先级priority，优先级由高到低分为 OFF ,FATAL ,ERROR ,WARN ,INFO ,DEBUG ,ALL。 
          Log4j建议只使用FATAL ,ERROR ,WARN ,INFO ,DEBUG这五个级别。 -->
    <root>
        <priority value ="ERROR"/>
        <appender-ref ref="ConsoleAppender" />
        <!-- 
        <level value="error" />
        <appender-ref ref="RollingFileAppender" />
        <appender-ref ref="DailyRollingFileAppender" /> -->
    </root>
     
</log4j:configuration>