package com.example.quartz.excute;import java.lang.reflect.Method;import java.sql.Timestamp;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.quartz.CronScheduleBuilder;import org.quartz.CronTrigger;import org.quartz.JobBuilder;import org.quartz.JobDetail;import org.quartz.JobExecutionContext;import org.quartz.JobKey;import org.quartz.Scheduler;import org.quartz.SchedulerException;import org.quartz.TriggerBuilder;import org.quartz.TriggerKey;import org.quartz.impl.StdSchedulerFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import com.example.quartz.excute.cycle.Startup;import com.example.quartz.service.ITimedTaskAbnormalService;import com.example.quartz.service.ITimedTaskManageService;import com.example.quartz.service.ITimedTaskRunningTimeService;import com.example.common.util.DateTimeParser;import com.example.common.util.StringUtil;import com.example.quartz.entity.OperationByIdReq;import com.example.quartz.entity.TSystemTimedTaskAbnormal;import com.example.quartz.entity.TSystemTimedTaskManage;import com.example.quartz.entity.TSystemTimedTaskRunningTime;import com.example.quartz.enums.EnabledStatus;import com.example.quartz.enums.JobStatus;import com.example.quartz.excute.cycle.Shutdown;/** *  * 定时任务管理器 <功能详细描述> *  * @author liunh * @version [版本号, 2016年7月6日] */@Componentpublic class SchedulerContainer implements Startup, Shutdown {	protected static final Logger logger = LoggerFactory.getLogger(SchedulerContainer.class);	private static Scheduler scheduler;		private static final String GROUP_NAME = "DEFAULT";	private static final HashMap<String, JobStatus> jobStatusMap = new HashMap<String, JobStatus>();	@Autowired	private ITimedTaskManageService taskManage;	@Autowired	private ITimedTaskAbnormalService taskAbnormal;	@Autowired	private ITimedTaskRunningTimeService taskRunningTime;	// @Autowired	// private SchedulerFactoryBean schedulerFactoryBean;	// task.getJobId(), task	private HashMap<String, TSystemTimedTaskManage> taskMap = new HashMap<String, TSystemTimedTaskManage>();	/**	 * 启动任务	 */	@Override	public void onStartup() {		if (scheduler == null) {			try {				// scheduler = schedulerFactoryBean.getScheduler();				scheduler = new StdSchedulerFactory("quartz.properties").getScheduler();				scheduler.start();				TSystemTimedTaskManage req = new TSystemTimedTaskManage();				List<TSystemTimedTaskManage> list = taskManage.findListEnable(req);				if (list != null && list.size() > 0) {					for (TSystemTimedTaskManage task : list) {						try {							if(EnabledStatus.ENABLE.name().equals(task.getEnabledStatus())){								scheduleJob(task);							}						} catch (Exception e) {							logger.error("执行异常：scheduler name is +" + task.getJobName());						}					}				}			} catch (Exception e) {				logger.error("scheduler start error", e);			}		}	}	/**	 * 自动执行任务	 * 	 * @param context	 * @throws Exception	 */	public void executeJob(JobExecutionContext context) {		JobKey jobKey = context.getJobDetail().getKey();		String id = jobKey.getName();		handExecuteJob(id);	}	/**	 * 手动执行任务	 * 	 * @param id	 */	public Map<String, String> handExecuteJob(String id) {		Map<String, String> result = new HashMap<String, String>();		OperationByIdReq req = new OperationByIdReq();		req.setId(id);		try {			TSystemTimedTaskManage task = taskManage.findById(req);			if (task == null) {				result.put("ERROR", "此任务不存在id:+" + id);				logger.info("此任务不存在id:+" + id);			} else {				if (EnabledStatus.ENABLE.name().equals(task.getEnabledStatus())) {					return initJob(task);				} else {					result.put("ERROR", "此任务已被禁用，请先开启");					logger.info("此任务已被禁用，请先开启:" + task.getJobName());				}			}		} catch (Throwable e) {			result.put("ERROR", "执行任务失败id:" + id);			logger.info("执行任务失败id:+" + id);		}		return result;	}	/**	 * 禁用、启用任务	 * 	 * @return	 */	public void updateStatus(TSystemTimedTaskManage task) throws Throwable {		try {			if (EnabledStatus.ENABLE.name().equals(task.getEnabledStatus())) {				scheduleJob(task);			} else {				removeJob(task.getJobId());			}		} catch (Exception e) {			logger.error(e.getMessage());			throw e;		}	}	/**	 * 添加、修改任务	 * 	 * @return	 */	public void editJob(TSystemTimedTaskManage task) throws Throwable {		try {			if (!StringUtil.isEmpty(task.getJobId())) {				removeJob(task.getJobId());			}			scheduleJob(task);		} catch (Exception e) {			logger.error(e.getMessage());			throw e;		}	}	/**	 * 删除任务	 * 	 * @param id	 * @throws Exception	 */	private void removeJob(String id) throws Exception {		scheduler.unscheduleJob(getTriggerKey(id));		scheduler.deleteJob(getJobKey(id));		jobStatusMap.remove(id);		taskMap.remove(id);	}	/**	 * 停止任务	 */	@Override	public void onShutdown() {		try {			if (scheduler != null) {				scheduler.clear();			}			jobStatusMap.clear();			Thread.currentThread().interrupt();		} catch (SchedulerException e) {			e.printStackTrace();		}	}	/** ************************************** */		/**	 * 初始化任务	 * @param task	 * @return	 */	private Map<String, String> initJob(TSystemTimedTaskManage task) {		Map<String, String> result = new HashMap<String, String>();		try {			if (task != null) {				String jobParam = task.getExtendParam();				if (!StringUtil.isEmpty(jobParam)) {					HashMap<String, String> map = new HashMap<String, String>();					String[] values = jobParam.split(",");					for (String v : values) {						String[] pair = v.split(":");						if (pair.length == 2) {							String key = pair[0];							String value = pair[1];							map.put(key, value);						}					}					JobContext.setParamMap(map);				}				Class<?> clazz = Class.forName(task.getExecutionClazz());				Method method = clazz.getDeclaredMethod(task.getExecutionMathod());				Object obj = clazz.newInstance();				if (obj == null) {					result.put("ERROR", "实体bean未初始化");					logger.info("实体bean未初始化:" + clazz.getName());					return result;				}				jobStatusMap.put(task.getJobId(), JobStatus.runing);				task.setEndTime(new Timestamp(System.currentTimeMillis()));				String executeTime = "0";				try {					Thread currentThread = Thread.currentThread();					long statTime = System.currentTimeMillis();					logger.info("StartJob_,ThreadId:" + currentThread.getId() + ",Method:" + clazz.getName() + "."							+ method.getName() + " ,startTime"							+ DateTimeParser.format(new Date(), "yyyy-MM-dd HH:mm:ss"));					method.invoke(obj);					long endTime = System.currentTimeMillis();					logger.info("EndJob_,ThreadId:" + currentThread.getId() + ",Method:" + clazz.getName() + "."							+ method.getName() + " ,startTime"							+ DateTimeParser.format(new Date(), "yyyy-MM-dd HH:mm:ss") + ",execute:"							+ ((endTime - statTime) / 1000) + " s");					executeTime = ((endTime - statTime) / 1000.0d) + "";				} catch (Exception e) {					logger.error("", e);					TSystemTimedTaskAbnormal abnormal = new TSystemTimedTaskAbnormal();					abnormal.setJobId(task.getJobId());					abnormal.setAbnmContent(e.getMessage());					try {						taskAbnormal.insert(abnormal);					} catch (Throwable e1) {						e1.printStackTrace();					}					result.put("ERROR", "运行失败");					logger.info("任务运行失败:" + clazz.getName() + "." + method.getName());				}				task.setStartTime(new Timestamp(System.currentTimeMillis()));				TSystemTimedTaskRunningTime runningTime = new TSystemTimedTaskRunningTime();				runningTime.setJobId(task.getJobId());				runningTime.setDuration(executeTime);				runningTime.setEndTime(task.getEndTime());				runningTime.setStartTime(task.getStartTime());				taskRunningTime.insert(runningTime);				result.put("SUCCESS", "任务运行成功");			}		} catch (Throwable e) {			TSystemTimedTaskAbnormal abnormal = new TSystemTimedTaskAbnormal();			abnormal.setJobId(task.getJobId());			abnormal.setAbnmContent(e.getMessage());			try {				taskAbnormal.insert(abnormal);			} catch (Throwable e1) {				e1.printStackTrace();			}			result.put("ERROR", "运行失败");		} finally {			if (task != null) {				jobStatusMap.put(task.getJobId(), JobStatus.waiting);			}		}		return result;	}		/**	 * 任务调度	 * 	 * @param task	 * @throws Exception	 */	public void scheduleJob(TSystemTimedTaskManage task) throws Exception {		if (EnabledStatus.DISABLE.name().equals(task.getEnabledStatus())) {			return;		}		removeJob(task.getJobId());				CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(task.getExecutionTime());		TriggerKey triggerKey = getTriggerKey(task.getJobId());		CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);		trigger = TriggerBuilder.newTrigger().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();		JobKey jobKey = getJobKey(task.getJobId());		JobDetail jobDetail = JobBuilder.newJob(JobProxy.class).withIdentity(jobKey).build();		jobDetail.getJobDataMap().put(task.getJobId(), task.getExtendParam());// 传递参数		scheduler.scheduleJob(jobDetail, trigger);				jobStatusMap.put(task.getJobId(), JobStatus.waiting);		taskMap.put(task.getJobId(), task);	}	static JobKey getJobKey(String id) {		JobKey key = new JobKey(id + "", GROUP_NAME);		return key;	}	static TriggerKey getTriggerKey(String id) {		TriggerKey key = new TriggerKey(id + "", GROUP_NAME);		return key;	}	}